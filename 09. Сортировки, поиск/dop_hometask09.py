# Продебажить алгоритмы рассмотренные на уроке, написать краткие тезисы о каждом алгоритме.
# Написать игру "Угадай число" используя бинарный поиск: игрок загадывает число, пк отгадывает и показывает
# кол-во попыток.

#1. Bubble Sort (пузырьковая сортировка)

# - максимальное число перемещается в конец
# - максимально просто демонстрирует саму концепцию сортировки
# - эффективен лишь для небольших массивов
# - сложность алгоритма O(n^2)
# - считается учебным и практически не применяется вне учебной литературы
# - лежит в основе некоторых более совершенных алгоритмов
# - может быть оптимизирован

#2. Selection Sort (сортировка выбором)

# - простой алгоритм, но более эффективный по сравнению с пузырьковой сортировкой
# - минимальное число перемещается в начало
# - сложность алгоритма O(n^2)

#3. Insertion Sort (сортировка вставками)

# - каждый новый поступивший элемент размещается в подходящее место среди ранее упорядоченных элементов
# - быстрее и проще двух предыдущих
# - сложность алгоритма O(n^2)

#4. Merge Sort (сортировка слиянием)
# - эффективный алгоритм сортировки, обеспечивающий стабильную сортировку
# - это Разделяй и властвуй алгоритм
# - высокая эффекстивность достигается благодаря рекурсии

#5. Quick Sort (быстрая сортировка)
# - как и сортировка слиянием, быстрая сортировка использует подход «Разделяй и властвуй»
# - в стандартных реализациях он работает быстрее сортировки слиянием

# Игра "Угадай число":


def binary_search() -> int:
    first_index = 1
    last_index = 100
    count = 1
    print("Guess a number from", first_index, "to", last_index)

    while first_index <= last_index:
        middle_index = (first_index + last_index) // 2
        print("Are your number is: ", middle_index)
        choice = input("Enter \"+\" if yes or \"-\" if no: ")
        if choice == "+":
            print("Number of attempts: ", count)
            return middle_index
        elif choice == "-":
            count += 1
            print("Are your number bigger or lower", middle_index, "?")
            choice_2 = input("Enter \"+\" if bigger or \"-\" if lower: ")
            if choice_2 == "+":
                first_index = middle_index + 1
            elif choice_2 == "-":
                last_index = middle_index
        elif choice != "-" or choice != "+":
            print("Wrong choice! Enter only \"+\" or \"-\"!")


result = binary_search()
print("You guessed the number: ", result)
